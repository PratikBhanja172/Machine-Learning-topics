# -*- coding: utf-8 -*-
"""Random-Forest.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1dP14hUJaAMFZ1Ra8_Mqq-npkBh-bDMrs
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import matplotlib as mpl

train=pd.read_csv("/content/train.csv")

print(train.shape)

train.head(5)

#checking for missing data
NAs=pd.concat([train.isnull().sum()],axis=1,keys=["Train"])
NAs[NAs.sum(axis=1)>0]
#checking for missing Age values with mean
train["Age"]=train["Age"].fillna(train["Age"].mean())

##Filling missing Embarked values with most common value
train["Embarked"]=train["Embarked"].fillna(train["Embarked"].mode()[0])

train["Pclass"]=train["Pclass"].apply(str)

for col in train.dtypes[train.dtypes == "object"].index:
    for_dummy = train.pop(col)
    train = pd.concat([train, pd.get_dummies(for_dummy, prefix=col)], axis=1)

train.head()

labels=train.pop("Survived")

from sklearn.model_selection import train_test_split
x_train,x_test,y_train,y_test=train_test_split(train,labels,test_size=0.25,random_state=42)

from sklearn.ensemble import RandomForestClassifier
rf=RandomForestClassifier(n_estimators=100)
rf.fit(x_train,y_train)

y_pred=rf.predict(x_test)

y_pred

from sklearn.ensemble import RandomForestClassifier
rf=RandomForestClassifier()
rf.fit(x_train,y_train)

y_pred=rf.predict(x_test)

from sklearn.metrics import roc_curve,auc
false_positive_rate,true_positive_rate,thresholds=roc_curve(y_test,y_pred)
roc_auc=auc(false_positive_rate,true_positive_rate)
roc_auc

n_estimators = [1, 2, 4, 8, 16, 32, 64, 100, 200]
train_results = []
test_results = []

for estimator in n_estimators:
    rf = RandomForestClassifier(n_estimators=estimator, n_jobs=-1)
    rf.fit(x_train, y_train)

    # Train AUC
    y_pred = rf.predict_proba(x_train)[:, 1]
    false_positive_rate, true_positive_rate, thresholds = roc_curve(y_train, y_pred)
    train_results.append(auc(false_positive_rate, true_positive_rate))

    # Test AUC
    y_pred = rf.predict_proba(x_test)[:, 1]
    false_positive_rate, true_positive_rate, thresholds = roc_curve(y_test, y_pred)
    test_results.append(auc(false_positive_rate, true_positive_rate))

from matplotlib.legend_handler import HandlerLine2D
line1, = plt.plot(n_estimators, train_results, 'b', label="Train AUC")
line2, = plt.plot(n_estimators, test_results, 'r', label="Test AUC")
plt.legend(handler_map={line1: HandlerLine2D(numpoints=2)})
plt.xlabel("n_estimators")
plt.ylabel("AUC")
plt.show()

